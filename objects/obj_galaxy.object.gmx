<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_galaxy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
enum moveTarget {
    in,
    out
}

lvl_num = 15;
dist_center = point_distance(0, 0, obj_main.dis_w /2, obj_main.dis_h /2);
dir_center = point_direction(obj_main.dis_w /2, obj_main.dis_h /2, x, y);
spr_w = sprite_get_width(spr_galaxy);
spr_h = sprite_get_height(spr_galaxy);
is_in_move = false;
move_dir = 0;
move_dir_spd = 2.5;
move_target = moveTarget.in;
move_back = false;
image_angle = random(360);
angle_max_spd = 0.3;
angle_spd = random_range(-angle_max_spd, angle_max_spd);
angle_std_grav = 0.01;
angle_grav = angle_std_grav;
index = 0;
dir = 0;
dir_spd = 10;
is_under_mouse = false;
angle_diff = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// !!! 32 -- radious of level_button
var dist = -32 / lengthdir_y(1, 90 / lvl_num);

for (var i = 0; i &lt; lvl_num; i++) {
    var dir = dir_center + 90 + 180 * ((i + 0.5) / lvl_num);
    with (instance_create(
        obj_main.dis_w /2 + lengthdir_x(dist, dir),
        obj_main.dis_h /2 + lengthdir_y(dist, dir),
        obj_lvl_btn)) {
        index = i + 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (is_in_move) {
    move_dir += move_dir_spd;
    if (move_dir &gt;= 180) {
        move_dir = 0;
        if (move_back) {
            move_back = false;
            if (move_target == moveTarget.in) {
                move_target = moveTarget.out;
            } else {
                move_target = moveTarget.in;
            }
        } else {
            is_in_move = false;
        }
    }
}

angle_spd += random_range(-angle_grav, angle_grav);
angle_spd = median(-angle_max_spd, angle_spd, angle_max_spd);
image_angle += angle_spd;
if (is_under_mouse) {
    dir += dir_spd;
    dir = dir mod 360;
} else {
    if (dir &gt; 0) {
        dir += dir_spd;
    }
    if (dir &gt;= 360) {
        dir = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
is_under_mouse = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
is_under_mouse = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (!is_in_move &amp;&amp; move_target == moveTarget.in) {
    if (obj_main.is_lvl_sel) {
        var need = true;
        with (obj_galaxy) {
            if (is_in_move) {
                need = false;
                break;
            }
        }
        if (need) {
            with (obj_lvl_btn) {
                if (is_in_move) {
                    if (move_target == moveTarget.in) {
                        move_back = true;
                    }
                } else {
                    if (move_target == moveTarget.in) {
                        is_in_move = true;
                        move_target = moveTarget.out;
                    }
                }
            }
            obj_main.is_lvl_sel = false;
            var lvl_sel_id = index;
            with (obj_galaxy) {
                if (index != lvl_sel_id) {
                    if (is_in_move) {
                        if (move_target == moveTarget.out) {
                            move_back = true;
                        }
                    } else {
                        if (move_target == moveTarget.out) {
                            is_in_move = true;
                            move_target = moveTarget.in;
                        }
                    }
                }
            }
        }
    } else {
        var need = true;
        with (obj_galaxy) {
            if (is_in_move) {
                need = false;
                break;
            }
        }
        if (need) {
            obj_main.is_lvl_sel = true;
            var lvl_sel_id = index;
            with (obj_galaxy) {
                if (index != lvl_sel_id) {
                    if (is_in_move) {
                        if (move_target == moveTarget.in) {
                            move_back = true;
                        } else {
                        }
                    } else {
                        if (move_target == moveTarget.in) {
                            is_in_move = true;
                            move_target = moveTarget.out;
                        }
                    }
                }
            }
            if (!instance_exists(obj_lvl_btn) &amp;&amp; alarm[0] &lt; 0) {
                alarm[0] = floor(180 / obj_galaxy.move_dir_spd - 180 / obj_main.lvl_btn_dir_spd);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var dist = point_distance(0, 0, spr_w /2 * image_xscale, spr_h /2 * image_yscale) + dist_center;
var x_out = obj_main.dis_w /2 + lengthdir_x(dist, dir_center);
var y_out = obj_main.dis_h /2 + lengthdir_y(dist, dir_center);
var ldx = (lengthdir_x(1, move_dir) +1) /2;

if (is_in_move) {
    if (move_target = moveTarget.in) {
        draw_sprite_ext(spr_galaxy, index,
            x + ldx * (x_out - x),
            y + ldx * (y_out - y),
            image_xscale, image_yscale, image_angle + lengthdir_y(angle_diff, lengthdir_x(45, dir)), c_white, 1);
    } else {
        draw_sprite_ext(spr_galaxy, index,
            x_out - ldx * (x_out - x),
            y_out - ldx * (y_out - y),
            image_xscale, image_yscale, image_angle + lengthdir_y(angle_diff, lengthdir_x(45, dir)), c_white, 1);
    }
} else if (move_target == moveTarget.in) {
    draw_sprite_ext(spr_galaxy, index, x, y, image_xscale, image_yscale, image_angle + lengthdir_y(angle_diff, lengthdir_x(45, dir)), c_white, 1);
} else {
    draw_sprite_ext(spr_galaxy, index, x_out, y_out, image_xscale, image_yscale, image_angle + lengthdir_y(angle_diff, lengthdir_x(45, dir)), c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
